# ================================================================
# ~/.config/zsh/prompt.zsh - Configura√ß√£o do prompt
# ================================================================

setopt PROMPT_SUBST
autoload -U colors && colors

# ===== VARI√ÅVEIS DE CACHE =====
typeset -g _cmd_start=0
typeset -g _cmd_duration=""
typeset -g _git_info_cache=""
typeset -g _nodejs_info_cache=""
typeset -g _python_info_cache=""
typeset -g _cache_pwd=""
typeset -g _last_cmd_executed=false
typeset -g _prompt_initialized=false
typeset -g _empty_enter_pressed=false
typeset -g _skip_next_duration=false

# ===== INICIALIZA√á√ÉO =====
_initialize_prompt() {
  if [[ $_prompt_initialized == false ]]; then
    _update_git_info
    _update_nodejs_info
    _update_python_info
    _cache_pwd="$PWD"
    _prompt_initialized=true
  fi
}

# ===== HOOKS DO PROMPT =====

# Detecta se Enter foi pressionado em linha vazia
zle-line-init() {
  # Cursor s√≥lido, sem blink
  printf '\e[2 q'
}
zle -N zle-line-init

zle-line-finish() {
  # CR√çTICO: Esconde cursor IMEDIATAMENTE quando Enter √© pressionado
  printf '\e[?25l'
  
  # Detecta se a linha est√° vazia quando Enter √© pressionado
  if [[ -z "$BUFFER" ]]; then
    _empty_enter_pressed=true
    _skip_next_duration=true  # Para input vazio, pula a dura√ß√£o do pr√≥ximo comando
  else
    _empty_enter_pressed=false
    _skip_next_duration=false
  fi
}
zle -N zle-line-finish

# Timer de comando (roda ANTES do comando)
preexec() {
  _cmd_start=$(($(date +%s%N)/1000000))
  _last_cmd_executed=true
  _empty_enter_pressed=false
  _skip_next_duration=false  # Reseta para comandos reais
  
  # Mostra cursor antes de executar comando
  printf '\e[?25h'
}

# Atualiza informa√ß√µes ap√≥s comando (roda DEPOIS do comando)
precmd() {
  # CR√çTICO: Esconde cursor no in√≠cio do precmd
  printf '\e[?25l'
  
  # Garante inicializa√ß√£o no primeiro prompt
  _initialize_prompt
  
  local needs_update=false
  
  # Calcula dura√ß√£o do comando (apenas se comando foi executado)
  if [[ $_cmd_start -gt 0 ]]; then
    local now=$(($(date +%s%N)/1000000))
    local elapsed=$((now - _cmd_start))
    # Formata dura√ß√£o baseado no tempo decorrido
    if [[ $elapsed -ge 60000 ]]; then
      # >= 1 minuto: mostra minutos e segundos
      local mins=$((elapsed / 60000))
      local secs=$(((elapsed % 60000) / 1000))
      _cmd_duration="${mins}m ${secs}s"
    elif [[ $elapsed -ge 1000 ]]; then
      # >= 1 segundo: mostra segundos e milisegundos
      local secs=$((elapsed / 1000))
      local ms=$((elapsed % 1000))
      _cmd_duration="${secs}s ${ms}ms"
    else
      # < 1 segundo: mostra apenas milisegundos
      _cmd_duration="${elapsed}ms"
    fi
    _cmd_start=0
    needs_update=true
  elif [[ $_empty_enter_pressed == true ]]; then
    # Enter vazio - limpa dura√ß√£o
    _cmd_duration=""
  fi
  
  # Imprime a dura√ß√£o na tela para persist√™ncia (apenas se n√£o for para pular)
  if [[ $_skip_next_duration == false ]] && [[ -n "$_cmd_duration" ]]; then
    echo "Command took: $_cmd_duration"
  fi
  
  # Se for para pular a pr√≥xima, imprime uma linha vazia para "timestamp vazio" e reseta
  if [[ $_skip_next_duration == true ]]; then
    echo "Command took: "  # Linha vazia para representar timestamp vazio
    _skip_next_duration=false
  fi
  
  # Atualiza caches apenas se necess√°rio
  if [[ "$PWD" != "$_cache_pwd" ]] || [[ $needs_update == true ]]; then
    _update_git_info
    _update_nodejs_info
    _update_python_info
    _cache_pwd="$PWD"
  fi
  
  _last_cmd_executed=false
  
  # CR√çTICO: Pequeno delay antes de mostrar cursor (similar ao wezterm.sleep_ms)
  # Isso d√° tempo para o prompt renderizar completamente
  sleep 0.005  # 5ms de delay
  
  # Mostra cursor novamente ap√≥s prompt estar pronto
  printf '\e[?25h'
}

# ===== FUN√á√ïES DE CACHE =====

_update_git_info() {
  _git_info_cache=""
  
  local branch=$(git symbolic-ref --short HEAD 2>/dev/null)
  
  if [[ -n "$branch" ]]; then
    local git_status=""
    
    if ! git diff --quiet 2>/dev/null || ! git diff --cached --quiet 2>/dev/null; then
      git_status=" %F{yellow}[*]%f"
    elif [[ -n $(git ls-files --others --exclude-standard 2>/dev/null) ]]; then
      git_status=" %F{yellow}[?]%f"
    fi
    
    _git_info_cache=" %F{magenta} %F{magenta}$branch%f$git_status"
  fi
}

_update_nodejs_info() {
  _nodejs_info_cache=""
  
  if [[ -f "package.json" ]]; then
    local node_version=$(node --version 2>/dev/null)
    if [[ -n "$node_version" ]]; then
      _nodejs_info_cache=" %F{green}‚¨¢ ${node_version#v}%f"
    fi
  fi
}

_update_python_info() {
  _python_info_cache=""
  
  if [[ -f ".python-version" ]] || [[ -f "Pipfile" ]] || [[ -f "pyproject.toml" ]]; then
    local python_version=$(python3 --version 2>/dev/null | cut -d' ' -f2)
    if [[ -n "$python_version" ]]; then
      _python_info_cache=" %F{yellow}üêç ${python_version}%f"
    fi
  fi
}

# ===== COMPONENTES DO PROMPT =====

_prompt_dir() {
  local dir="${PWD/#$HOME/~}"
  local parts=(${(s:/:)dir})
  
  if [[ ${#parts[@]} -gt 3 ]]; then
    echo "‚Ä¶/${parts[-3]}/${parts[-2]}/${parts[-1]}"
  else
    echo "$dir"
  fi
}

_prompt_char() {
  if [[ $? -eq 0 ]]; then
    echo "%F{green}%B\$%b%f"
  else
    echo "%F{red}%B\$%b%f"
  fi
}

# ===== DEFINI√á√ÉO DO PROMPT =====

PROMPT='%F{cyan}$(_prompt_dir)%f${_git_info_cache}${_nodejs_info_cache}${_python_info_cache} $(_prompt_char) '

# RPROMPT removido, pois as dura√ß√µes agora s√£o impressas persistentemente na tela
RPROMPT=''

# ===== CONFIGURA√á√ïES ANTI-FLICKER =====

# CR√çTICO: Configura√ß√µes para eliminar movimento de cursor
setopt prompt_cr              # Permite controle manual do CR
setopt prompt_sp              # Preserva output parcial
unsetopt promptsubst 2>/dev/null  # Desabilita temporariamente

# Re-habilita PROMPT_SUBST (necess√°rio para fun√ß√µes)
setopt PROMPT_SUBST

# Desabilita marca de fim de linha
typeset -g PROMPT_EOL_MARK=''

# EXPERIMENTAL: For√ßa redraw completo em vez de incremental
setopt transient_rprompt 2>/dev/null

# Reduz delay de teclado ao m√≠nimo
KEYTIMEOUT=1

# CR√çTICO: For√ßa regi√£o de scroll completa (evita movimento parcial)
print -n '\e[r'
